# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ftp_pb2 as ftp_dot_ftp__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in ftp/ftp_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class FtpServiceStub(object):
    """
    Implements file transfer functionality using MAVLink FTP.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeDownload = channel.unary_stream(
                '/mavsdk.rpc.ftp.FtpService/SubscribeDownload',
                request_serializer=ftp_dot_ftp__pb2.SubscribeDownloadRequest.SerializeToString,
                response_deserializer=ftp_dot_ftp__pb2.DownloadResponse.FromString,
                _registered_method=True)
        self.SubscribeUpload = channel.unary_stream(
                '/mavsdk.rpc.ftp.FtpService/SubscribeUpload',
                request_serializer=ftp_dot_ftp__pb2.SubscribeUploadRequest.SerializeToString,
                response_deserializer=ftp_dot_ftp__pb2.UploadResponse.FromString,
                _registered_method=True)
        self.ListDirectory = channel.unary_unary(
                '/mavsdk.rpc.ftp.FtpService/ListDirectory',
                request_serializer=ftp_dot_ftp__pb2.ListDirectoryRequest.SerializeToString,
                response_deserializer=ftp_dot_ftp__pb2.ListDirectoryResponse.FromString,
                _registered_method=True)
        self.CreateDirectory = channel.unary_unary(
                '/mavsdk.rpc.ftp.FtpService/CreateDirectory',
                request_serializer=ftp_dot_ftp__pb2.CreateDirectoryRequest.SerializeToString,
                response_deserializer=ftp_dot_ftp__pb2.CreateDirectoryResponse.FromString,
                _registered_method=True)
        self.RemoveDirectory = channel.unary_unary(
                '/mavsdk.rpc.ftp.FtpService/RemoveDirectory',
                request_serializer=ftp_dot_ftp__pb2.RemoveDirectoryRequest.SerializeToString,
                response_deserializer=ftp_dot_ftp__pb2.RemoveDirectoryResponse.FromString,
                _registered_method=True)
        self.RemoveFile = channel.unary_unary(
                '/mavsdk.rpc.ftp.FtpService/RemoveFile',
                request_serializer=ftp_dot_ftp__pb2.RemoveFileRequest.SerializeToString,
                response_deserializer=ftp_dot_ftp__pb2.RemoveFileResponse.FromString,
                _registered_method=True)
        self.Rename = channel.unary_unary(
                '/mavsdk.rpc.ftp.FtpService/Rename',
                request_serializer=ftp_dot_ftp__pb2.RenameRequest.SerializeToString,
                response_deserializer=ftp_dot_ftp__pb2.RenameResponse.FromString,
                _registered_method=True)
        self.AreFilesIdentical = channel.unary_unary(
                '/mavsdk.rpc.ftp.FtpService/AreFilesIdentical',
                request_serializer=ftp_dot_ftp__pb2.AreFilesIdenticalRequest.SerializeToString,
                response_deserializer=ftp_dot_ftp__pb2.AreFilesIdenticalResponse.FromString,
                _registered_method=True)
        self.SetTargetCompid = channel.unary_unary(
                '/mavsdk.rpc.ftp.FtpService/SetTargetCompid',
                request_serializer=ftp_dot_ftp__pb2.SetTargetCompidRequest.SerializeToString,
                response_deserializer=ftp_dot_ftp__pb2.SetTargetCompidResponse.FromString,
                _registered_method=True)


class FtpServiceServicer(object):
    """
    Implements file transfer functionality using MAVLink FTP.
    """

    def SubscribeDownload(self, request, context):
        """
        Downloads a file to local directory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeUpload(self, request, context):
        """
        Uploads local file to remote directory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListDirectory(self, request, context):
        """
        Lists items from a remote directory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateDirectory(self, request, context):
        """
        Creates a remote directory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveDirectory(self, request, context):
        """
        Removes a remote directory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveFile(self, request, context):
        """
        Removes a remote file.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rename(self, request, context):
        """
        Renames a remote file or remote directory.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AreFilesIdentical(self, request, context):
        """
        Compares a local file to a remote file using a CRC32 checksum.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetTargetCompid(self, request, context):
        """
        Set target component ID. By default it is the autopilot.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FtpServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SubscribeDownload': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeDownload,
                    request_deserializer=ftp_dot_ftp__pb2.SubscribeDownloadRequest.FromString,
                    response_serializer=ftp_dot_ftp__pb2.DownloadResponse.SerializeToString,
            ),
            'SubscribeUpload': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeUpload,
                    request_deserializer=ftp_dot_ftp__pb2.SubscribeUploadRequest.FromString,
                    response_serializer=ftp_dot_ftp__pb2.UploadResponse.SerializeToString,
            ),
            'ListDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.ListDirectory,
                    request_deserializer=ftp_dot_ftp__pb2.ListDirectoryRequest.FromString,
                    response_serializer=ftp_dot_ftp__pb2.ListDirectoryResponse.SerializeToString,
            ),
            'CreateDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateDirectory,
                    request_deserializer=ftp_dot_ftp__pb2.CreateDirectoryRequest.FromString,
                    response_serializer=ftp_dot_ftp__pb2.CreateDirectoryResponse.SerializeToString,
            ),
            'RemoveDirectory': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveDirectory,
                    request_deserializer=ftp_dot_ftp__pb2.RemoveDirectoryRequest.FromString,
                    response_serializer=ftp_dot_ftp__pb2.RemoveDirectoryResponse.SerializeToString,
            ),
            'RemoveFile': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveFile,
                    request_deserializer=ftp_dot_ftp__pb2.RemoveFileRequest.FromString,
                    response_serializer=ftp_dot_ftp__pb2.RemoveFileResponse.SerializeToString,
            ),
            'Rename': grpc.unary_unary_rpc_method_handler(
                    servicer.Rename,
                    request_deserializer=ftp_dot_ftp__pb2.RenameRequest.FromString,
                    response_serializer=ftp_dot_ftp__pb2.RenameResponse.SerializeToString,
            ),
            'AreFilesIdentical': grpc.unary_unary_rpc_method_handler(
                    servicer.AreFilesIdentical,
                    request_deserializer=ftp_dot_ftp__pb2.AreFilesIdenticalRequest.FromString,
                    response_serializer=ftp_dot_ftp__pb2.AreFilesIdenticalResponse.SerializeToString,
            ),
            'SetTargetCompid': grpc.unary_unary_rpc_method_handler(
                    servicer.SetTargetCompid,
                    request_deserializer=ftp_dot_ftp__pb2.SetTargetCompidRequest.FromString,
                    response_serializer=ftp_dot_ftp__pb2.SetTargetCompidResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mavsdk.rpc.ftp.FtpService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mavsdk.rpc.ftp.FtpService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FtpService(object):
    """
    Implements file transfer functionality using MAVLink FTP.
    """

    @staticmethod
    def SubscribeDownload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mavsdk.rpc.ftp.FtpService/SubscribeDownload',
            ftp_dot_ftp__pb2.SubscribeDownloadRequest.SerializeToString,
            ftp_dot_ftp__pb2.DownloadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeUpload(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mavsdk.rpc.ftp.FtpService/SubscribeUpload',
            ftp_dot_ftp__pb2.SubscribeUploadRequest.SerializeToString,
            ftp_dot_ftp__pb2.UploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.ftp.FtpService/ListDirectory',
            ftp_dot_ftp__pb2.ListDirectoryRequest.SerializeToString,
            ftp_dot_ftp__pb2.ListDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.ftp.FtpService/CreateDirectory',
            ftp_dot_ftp__pb2.CreateDirectoryRequest.SerializeToString,
            ftp_dot_ftp__pb2.CreateDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveDirectory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.ftp.FtpService/RemoveDirectory',
            ftp_dot_ftp__pb2.RemoveDirectoryRequest.SerializeToString,
            ftp_dot_ftp__pb2.RemoveDirectoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RemoveFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.ftp.FtpService/RemoveFile',
            ftp_dot_ftp__pb2.RemoveFileRequest.SerializeToString,
            ftp_dot_ftp__pb2.RemoveFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Rename(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.ftp.FtpService/Rename',
            ftp_dot_ftp__pb2.RenameRequest.SerializeToString,
            ftp_dot_ftp__pb2.RenameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AreFilesIdentical(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.ftp.FtpService/AreFilesIdentical',
            ftp_dot_ftp__pb2.AreFilesIdenticalRequest.SerializeToString,
            ftp_dot_ftp__pb2.AreFilesIdenticalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetTargetCompid(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.ftp.FtpService/SetTargetCompid',
            ftp_dot_ftp__pb2.SetTargetCompidRequest.SerializeToString,
            ftp_dot_ftp__pb2.SetTargetCompidResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
