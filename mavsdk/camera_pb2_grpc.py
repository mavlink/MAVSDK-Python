# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import camera_pb2 as camera_dot_camera__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in camera/camera_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class CameraServiceStub(object):
    """
    Can be used to manage cameras that implement the MAVLink
    Camera Protocol: https://mavlink.io/en/protocol/camera.html.

    Currently only a single camera is supported.
    When multiple cameras are supported the plugin will need to be
    instantiated separately for every camera and the camera selected using
    `select_camera`.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.TakePhoto = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/TakePhoto',
                request_serializer=camera_dot_camera__pb2.TakePhotoRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.TakePhotoResponse.FromString,
                _registered_method=True)
        self.StartPhotoInterval = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/StartPhotoInterval',
                request_serializer=camera_dot_camera__pb2.StartPhotoIntervalRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.StartPhotoIntervalResponse.FromString,
                _registered_method=True)
        self.StopPhotoInterval = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/StopPhotoInterval',
                request_serializer=camera_dot_camera__pb2.StopPhotoIntervalRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.StopPhotoIntervalResponse.FromString,
                _registered_method=True)
        self.StartVideo = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/StartVideo',
                request_serializer=camera_dot_camera__pb2.StartVideoRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.StartVideoResponse.FromString,
                _registered_method=True)
        self.StopVideo = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/StopVideo',
                request_serializer=camera_dot_camera__pb2.StopVideoRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.StopVideoResponse.FromString,
                _registered_method=True)
        self.StartVideoStreaming = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/StartVideoStreaming',
                request_serializer=camera_dot_camera__pb2.StartVideoStreamingRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.StartVideoStreamingResponse.FromString,
                _registered_method=True)
        self.StopVideoStreaming = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/StopVideoStreaming',
                request_serializer=camera_dot_camera__pb2.StopVideoStreamingRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.StopVideoStreamingResponse.FromString,
                _registered_method=True)
        self.SetMode = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/SetMode',
                request_serializer=camera_dot_camera__pb2.SetModeRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.SetModeResponse.FromString,
                _registered_method=True)
        self.ListPhotos = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/ListPhotos',
                request_serializer=camera_dot_camera__pb2.ListPhotosRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.ListPhotosResponse.FromString,
                _registered_method=True)
        self.SubscribeCameraList = channel.unary_stream(
                '/mavsdk.rpc.camera.CameraService/SubscribeCameraList',
                request_serializer=camera_dot_camera__pb2.SubscribeCameraListRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.CameraListResponse.FromString,
                _registered_method=True)
        self.SubscribeMode = channel.unary_stream(
                '/mavsdk.rpc.camera.CameraService/SubscribeMode',
                request_serializer=camera_dot_camera__pb2.SubscribeModeRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.ModeResponse.FromString,
                _registered_method=True)
        self.GetMode = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/GetMode',
                request_serializer=camera_dot_camera__pb2.GetModeRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.GetModeResponse.FromString,
                _registered_method=True)
        self.SubscribeVideoStreamInfo = channel.unary_stream(
                '/mavsdk.rpc.camera.CameraService/SubscribeVideoStreamInfo',
                request_serializer=camera_dot_camera__pb2.SubscribeVideoStreamInfoRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.VideoStreamInfoResponse.FromString,
                _registered_method=True)
        self.GetVideoStreamInfo = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/GetVideoStreamInfo',
                request_serializer=camera_dot_camera__pb2.GetVideoStreamInfoRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.GetVideoStreamInfoResponse.FromString,
                _registered_method=True)
        self.SubscribeCaptureInfo = channel.unary_stream(
                '/mavsdk.rpc.camera.CameraService/SubscribeCaptureInfo',
                request_serializer=camera_dot_camera__pb2.SubscribeCaptureInfoRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.CaptureInfoResponse.FromString,
                _registered_method=True)
        self.SubscribeStorage = channel.unary_stream(
                '/mavsdk.rpc.camera.CameraService/SubscribeStorage',
                request_serializer=camera_dot_camera__pb2.SubscribeStorageRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.StorageResponse.FromString,
                _registered_method=True)
        self.GetStorage = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/GetStorage',
                request_serializer=camera_dot_camera__pb2.GetStorageRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.GetStorageResponse.FromString,
                _registered_method=True)
        self.SubscribeCurrentSettings = channel.unary_stream(
                '/mavsdk.rpc.camera.CameraService/SubscribeCurrentSettings',
                request_serializer=camera_dot_camera__pb2.SubscribeCurrentSettingsRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.CurrentSettingsResponse.FromString,
                _registered_method=True)
        self.GetCurrentSettings = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/GetCurrentSettings',
                request_serializer=camera_dot_camera__pb2.GetCurrentSettingsRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.GetCurrentSettingsResponse.FromString,
                _registered_method=True)
        self.SubscribePossibleSettingOptions = channel.unary_stream(
                '/mavsdk.rpc.camera.CameraService/SubscribePossibleSettingOptions',
                request_serializer=camera_dot_camera__pb2.SubscribePossibleSettingOptionsRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.PossibleSettingOptionsResponse.FromString,
                _registered_method=True)
        self.GetPossibleSettingOptions = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/GetPossibleSettingOptions',
                request_serializer=camera_dot_camera__pb2.GetPossibleSettingOptionsRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.GetPossibleSettingOptionsResponse.FromString,
                _registered_method=True)
        self.SetSetting = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/SetSetting',
                request_serializer=camera_dot_camera__pb2.SetSettingRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.SetSettingResponse.FromString,
                _registered_method=True)
        self.GetSetting = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/GetSetting',
                request_serializer=camera_dot_camera__pb2.GetSettingRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.GetSettingResponse.FromString,
                _registered_method=True)
        self.FormatStorage = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/FormatStorage',
                request_serializer=camera_dot_camera__pb2.FormatStorageRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.FormatStorageResponse.FromString,
                _registered_method=True)
        self.ResetSettings = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/ResetSettings',
                request_serializer=camera_dot_camera__pb2.ResetSettingsRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.ResetSettingsResponse.FromString,
                _registered_method=True)
        self.ZoomInStart = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/ZoomInStart',
                request_serializer=camera_dot_camera__pb2.ZoomInStartRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.ZoomInStartResponse.FromString,
                _registered_method=True)
        self.ZoomOutStart = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/ZoomOutStart',
                request_serializer=camera_dot_camera__pb2.ZoomOutStartRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.ZoomOutStartResponse.FromString,
                _registered_method=True)
        self.ZoomStop = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/ZoomStop',
                request_serializer=camera_dot_camera__pb2.ZoomStopRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.ZoomStopResponse.FromString,
                _registered_method=True)
        self.ZoomRange = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/ZoomRange',
                request_serializer=camera_dot_camera__pb2.ZoomRangeRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.ZoomRangeResponse.FromString,
                _registered_method=True)
        self.TrackPoint = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/TrackPoint',
                request_serializer=camera_dot_camera__pb2.TrackPointRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.TrackPointResponse.FromString,
                _registered_method=True)
        self.TrackRectangle = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/TrackRectangle',
                request_serializer=camera_dot_camera__pb2.TrackRectangleRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.TrackRectangleResponse.FromString,
                _registered_method=True)
        self.TrackStop = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/TrackStop',
                request_serializer=camera_dot_camera__pb2.TrackStopRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.TrackStopResponse.FromString,
                _registered_method=True)
        self.FocusInStart = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/FocusInStart',
                request_serializer=camera_dot_camera__pb2.FocusInStartRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.FocusInStartResponse.FromString,
                _registered_method=True)
        self.FocusOutStart = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/FocusOutStart',
                request_serializer=camera_dot_camera__pb2.FocusOutStartRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.FocusOutStartResponse.FromString,
                _registered_method=True)
        self.FocusStop = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/FocusStop',
                request_serializer=camera_dot_camera__pb2.FocusStopRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.FocusStopResponse.FromString,
                _registered_method=True)
        self.FocusRange = channel.unary_unary(
                '/mavsdk.rpc.camera.CameraService/FocusRange',
                request_serializer=camera_dot_camera__pb2.FocusRangeRequest.SerializeToString,
                response_deserializer=camera_dot_camera__pb2.FocusRangeResponse.FromString,
                _registered_method=True)


class CameraServiceServicer(object):
    """
    Can be used to manage cameras that implement the MAVLink
    Camera Protocol: https://mavlink.io/en/protocol/camera.html.

    Currently only a single camera is supported.
    When multiple cameras are supported the plugin will need to be
    instantiated separately for every camera and the camera selected using
    `select_camera`.
    """

    def TakePhoto(self, request, context):
        """
        Take one photo.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartPhotoInterval(self, request, context):
        """
        Start photo timelapse with a given interval.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopPhotoInterval(self, request, context):
        """
        Stop a running photo timelapse.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartVideo(self, request, context):
        """
        Start a video recording.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopVideo(self, request, context):
        """
        Stop a running video recording.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartVideoStreaming(self, request, context):
        """
        Start video streaming.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopVideoStreaming(self, request, context):
        """
        Stop current video streaming.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetMode(self, request, context):
        """
        Set camera mode.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListPhotos(self, request, context):
        """
        List photos available on the camera.

        Note that this might need to be called initially to set the PhotosRange accordingly.
        Once set to 'all' rather than 'since connection', it will try to request the previous
        images over time.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeCameraList(self, request, context):
        """
        Subscribe to list of cameras.

        This allows to find out what cameras are connected to the system.
        Based on the camera ID, we can then address a specific camera.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeMode(self, request, context):
        """
        Subscribe to camera mode updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMode(self, request, context):
        """
        Get camera mode.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeVideoStreamInfo(self, request, context):
        """
        Subscribe to video stream info updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetVideoStreamInfo(self, request, context):
        """
        Get video stream info.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeCaptureInfo(self, request, context):
        """
        Subscribe to capture info updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeStorage(self, request, context):
        """
        Subscribe to camera's storage status updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStorage(self, request, context):
        """
        Get camera's storage status.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeCurrentSettings(self, request, context):
        """
        Get the list of current camera settings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCurrentSettings(self, request, context):
        """
        Get current settings.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribePossibleSettingOptions(self, request, context):
        """
        Get the list of settings that can be changed.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPossibleSettingOptions(self, request, context):
        """
        Get possible setting options.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSetting(self, request, context):
        """
        Set a setting to some value.

        Only setting_id of setting and option_id of option needs to be set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSetting(self, request, context):
        """
        Get a setting.

        Only setting_id of setting needs to be set.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FormatStorage(self, request, context):
        """
        Format storage (e.g. SD card) in camera.

        This will delete all content of the camera storage!
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ResetSettings(self, request, context):
        """
        Reset all settings in camera.

        This will reset all camera settings to default value
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoomInStart(self, request, context):
        """
        Start zooming in.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoomOutStart(self, request, context):
        """
        Start zooming out.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoomStop(self, request, context):
        """
        Stop zooming.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ZoomRange(self, request, context):
        """
        Zoom to value as proportion of full camera range (percentage between 0.0 and 100.0).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrackPoint(self, request, context):
        """
        Track point.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrackRectangle(self, request, context):
        """
        Track rectangle.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TrackStop(self, request, context):
        """
        Stop tracking.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FocusInStart(self, request, context):
        """
        Start focusing in.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FocusOutStart(self, request, context):
        """
        Start focusing out.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FocusStop(self, request, context):
        """
        Stop focus.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FocusRange(self, request, context):
        """
        Focus with range value of full range (value between 0.0 and 100.0).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CameraServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'TakePhoto': grpc.unary_unary_rpc_method_handler(
                    servicer.TakePhoto,
                    request_deserializer=camera_dot_camera__pb2.TakePhotoRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.TakePhotoResponse.SerializeToString,
            ),
            'StartPhotoInterval': grpc.unary_unary_rpc_method_handler(
                    servicer.StartPhotoInterval,
                    request_deserializer=camera_dot_camera__pb2.StartPhotoIntervalRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.StartPhotoIntervalResponse.SerializeToString,
            ),
            'StopPhotoInterval': grpc.unary_unary_rpc_method_handler(
                    servicer.StopPhotoInterval,
                    request_deserializer=camera_dot_camera__pb2.StopPhotoIntervalRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.StopPhotoIntervalResponse.SerializeToString,
            ),
            'StartVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.StartVideo,
                    request_deserializer=camera_dot_camera__pb2.StartVideoRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.StartVideoResponse.SerializeToString,
            ),
            'StopVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.StopVideo,
                    request_deserializer=camera_dot_camera__pb2.StopVideoRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.StopVideoResponse.SerializeToString,
            ),
            'StartVideoStreaming': grpc.unary_unary_rpc_method_handler(
                    servicer.StartVideoStreaming,
                    request_deserializer=camera_dot_camera__pb2.StartVideoStreamingRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.StartVideoStreamingResponse.SerializeToString,
            ),
            'StopVideoStreaming': grpc.unary_unary_rpc_method_handler(
                    servicer.StopVideoStreaming,
                    request_deserializer=camera_dot_camera__pb2.StopVideoStreamingRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.StopVideoStreamingResponse.SerializeToString,
            ),
            'SetMode': grpc.unary_unary_rpc_method_handler(
                    servicer.SetMode,
                    request_deserializer=camera_dot_camera__pb2.SetModeRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.SetModeResponse.SerializeToString,
            ),
            'ListPhotos': grpc.unary_unary_rpc_method_handler(
                    servicer.ListPhotos,
                    request_deserializer=camera_dot_camera__pb2.ListPhotosRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.ListPhotosResponse.SerializeToString,
            ),
            'SubscribeCameraList': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeCameraList,
                    request_deserializer=camera_dot_camera__pb2.SubscribeCameraListRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.CameraListResponse.SerializeToString,
            ),
            'SubscribeMode': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeMode,
                    request_deserializer=camera_dot_camera__pb2.SubscribeModeRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.ModeResponse.SerializeToString,
            ),
            'GetMode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMode,
                    request_deserializer=camera_dot_camera__pb2.GetModeRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.GetModeResponse.SerializeToString,
            ),
            'SubscribeVideoStreamInfo': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeVideoStreamInfo,
                    request_deserializer=camera_dot_camera__pb2.SubscribeVideoStreamInfoRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.VideoStreamInfoResponse.SerializeToString,
            ),
            'GetVideoStreamInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetVideoStreamInfo,
                    request_deserializer=camera_dot_camera__pb2.GetVideoStreamInfoRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.GetVideoStreamInfoResponse.SerializeToString,
            ),
            'SubscribeCaptureInfo': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeCaptureInfo,
                    request_deserializer=camera_dot_camera__pb2.SubscribeCaptureInfoRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.CaptureInfoResponse.SerializeToString,
            ),
            'SubscribeStorage': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeStorage,
                    request_deserializer=camera_dot_camera__pb2.SubscribeStorageRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.StorageResponse.SerializeToString,
            ),
            'GetStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStorage,
                    request_deserializer=camera_dot_camera__pb2.GetStorageRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.GetStorageResponse.SerializeToString,
            ),
            'SubscribeCurrentSettings': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeCurrentSettings,
                    request_deserializer=camera_dot_camera__pb2.SubscribeCurrentSettingsRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.CurrentSettingsResponse.SerializeToString,
            ),
            'GetCurrentSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCurrentSettings,
                    request_deserializer=camera_dot_camera__pb2.GetCurrentSettingsRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.GetCurrentSettingsResponse.SerializeToString,
            ),
            'SubscribePossibleSettingOptions': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribePossibleSettingOptions,
                    request_deserializer=camera_dot_camera__pb2.SubscribePossibleSettingOptionsRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.PossibleSettingOptionsResponse.SerializeToString,
            ),
            'GetPossibleSettingOptions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPossibleSettingOptions,
                    request_deserializer=camera_dot_camera__pb2.GetPossibleSettingOptionsRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.GetPossibleSettingOptionsResponse.SerializeToString,
            ),
            'SetSetting': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSetting,
                    request_deserializer=camera_dot_camera__pb2.SetSettingRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.SetSettingResponse.SerializeToString,
            ),
            'GetSetting': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSetting,
                    request_deserializer=camera_dot_camera__pb2.GetSettingRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.GetSettingResponse.SerializeToString,
            ),
            'FormatStorage': grpc.unary_unary_rpc_method_handler(
                    servicer.FormatStorage,
                    request_deserializer=camera_dot_camera__pb2.FormatStorageRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.FormatStorageResponse.SerializeToString,
            ),
            'ResetSettings': grpc.unary_unary_rpc_method_handler(
                    servicer.ResetSettings,
                    request_deserializer=camera_dot_camera__pb2.ResetSettingsRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.ResetSettingsResponse.SerializeToString,
            ),
            'ZoomInStart': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoomInStart,
                    request_deserializer=camera_dot_camera__pb2.ZoomInStartRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.ZoomInStartResponse.SerializeToString,
            ),
            'ZoomOutStart': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoomOutStart,
                    request_deserializer=camera_dot_camera__pb2.ZoomOutStartRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.ZoomOutStartResponse.SerializeToString,
            ),
            'ZoomStop': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoomStop,
                    request_deserializer=camera_dot_camera__pb2.ZoomStopRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.ZoomStopResponse.SerializeToString,
            ),
            'ZoomRange': grpc.unary_unary_rpc_method_handler(
                    servicer.ZoomRange,
                    request_deserializer=camera_dot_camera__pb2.ZoomRangeRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.ZoomRangeResponse.SerializeToString,
            ),
            'TrackPoint': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackPoint,
                    request_deserializer=camera_dot_camera__pb2.TrackPointRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.TrackPointResponse.SerializeToString,
            ),
            'TrackRectangle': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackRectangle,
                    request_deserializer=camera_dot_camera__pb2.TrackRectangleRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.TrackRectangleResponse.SerializeToString,
            ),
            'TrackStop': grpc.unary_unary_rpc_method_handler(
                    servicer.TrackStop,
                    request_deserializer=camera_dot_camera__pb2.TrackStopRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.TrackStopResponse.SerializeToString,
            ),
            'FocusInStart': grpc.unary_unary_rpc_method_handler(
                    servicer.FocusInStart,
                    request_deserializer=camera_dot_camera__pb2.FocusInStartRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.FocusInStartResponse.SerializeToString,
            ),
            'FocusOutStart': grpc.unary_unary_rpc_method_handler(
                    servicer.FocusOutStart,
                    request_deserializer=camera_dot_camera__pb2.FocusOutStartRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.FocusOutStartResponse.SerializeToString,
            ),
            'FocusStop': grpc.unary_unary_rpc_method_handler(
                    servicer.FocusStop,
                    request_deserializer=camera_dot_camera__pb2.FocusStopRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.FocusStopResponse.SerializeToString,
            ),
            'FocusRange': grpc.unary_unary_rpc_method_handler(
                    servicer.FocusRange,
                    request_deserializer=camera_dot_camera__pb2.FocusRangeRequest.FromString,
                    response_serializer=camera_dot_camera__pb2.FocusRangeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mavsdk.rpc.camera.CameraService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mavsdk.rpc.camera.CameraService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class CameraService(object):
    """
    Can be used to manage cameras that implement the MAVLink
    Camera Protocol: https://mavlink.io/en/protocol/camera.html.

    Currently only a single camera is supported.
    When multiple cameras are supported the plugin will need to be
    instantiated separately for every camera and the camera selected using
    `select_camera`.
    """

    @staticmethod
    def TakePhoto(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/TakePhoto',
            camera_dot_camera__pb2.TakePhotoRequest.SerializeToString,
            camera_dot_camera__pb2.TakePhotoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartPhotoInterval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/StartPhotoInterval',
            camera_dot_camera__pb2.StartPhotoIntervalRequest.SerializeToString,
            camera_dot_camera__pb2.StartPhotoIntervalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopPhotoInterval(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/StopPhotoInterval',
            camera_dot_camera__pb2.StopPhotoIntervalRequest.SerializeToString,
            camera_dot_camera__pb2.StopPhotoIntervalResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/StartVideo',
            camera_dot_camera__pb2.StartVideoRequest.SerializeToString,
            camera_dot_camera__pb2.StartVideoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/StopVideo',
            camera_dot_camera__pb2.StopVideoRequest.SerializeToString,
            camera_dot_camera__pb2.StopVideoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StartVideoStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/StartVideoStreaming',
            camera_dot_camera__pb2.StartVideoStreamingRequest.SerializeToString,
            camera_dot_camera__pb2.StartVideoStreamingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopVideoStreaming(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/StopVideoStreaming',
            camera_dot_camera__pb2.StopVideoStreamingRequest.SerializeToString,
            camera_dot_camera__pb2.StopVideoStreamingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/SetMode',
            camera_dot_camera__pb2.SetModeRequest.SerializeToString,
            camera_dot_camera__pb2.SetModeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListPhotos(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/ListPhotos',
            camera_dot_camera__pb2.ListPhotosRequest.SerializeToString,
            camera_dot_camera__pb2.ListPhotosResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeCameraList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/SubscribeCameraList',
            camera_dot_camera__pb2.SubscribeCameraListRequest.SerializeToString,
            camera_dot_camera__pb2.CameraListResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/SubscribeMode',
            camera_dot_camera__pb2.SubscribeModeRequest.SerializeToString,
            camera_dot_camera__pb2.ModeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetMode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/GetMode',
            camera_dot_camera__pb2.GetModeRequest.SerializeToString,
            camera_dot_camera__pb2.GetModeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeVideoStreamInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/SubscribeVideoStreamInfo',
            camera_dot_camera__pb2.SubscribeVideoStreamInfoRequest.SerializeToString,
            camera_dot_camera__pb2.VideoStreamInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetVideoStreamInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/GetVideoStreamInfo',
            camera_dot_camera__pb2.GetVideoStreamInfoRequest.SerializeToString,
            camera_dot_camera__pb2.GetVideoStreamInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeCaptureInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/SubscribeCaptureInfo',
            camera_dot_camera__pb2.SubscribeCaptureInfoRequest.SerializeToString,
            camera_dot_camera__pb2.CaptureInfoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/SubscribeStorage',
            camera_dot_camera__pb2.SubscribeStorageRequest.SerializeToString,
            camera_dot_camera__pb2.StorageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/GetStorage',
            camera_dot_camera__pb2.GetStorageRequest.SerializeToString,
            camera_dot_camera__pb2.GetStorageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribeCurrentSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/SubscribeCurrentSettings',
            camera_dot_camera__pb2.SubscribeCurrentSettingsRequest.SerializeToString,
            camera_dot_camera__pb2.CurrentSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetCurrentSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/GetCurrentSettings',
            camera_dot_camera__pb2.GetCurrentSettingsRequest.SerializeToString,
            camera_dot_camera__pb2.GetCurrentSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SubscribePossibleSettingOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/SubscribePossibleSettingOptions',
            camera_dot_camera__pb2.SubscribePossibleSettingOptionsRequest.SerializeToString,
            camera_dot_camera__pb2.PossibleSettingOptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPossibleSettingOptions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/GetPossibleSettingOptions',
            camera_dot_camera__pb2.GetPossibleSettingOptionsRequest.SerializeToString,
            camera_dot_camera__pb2.GetPossibleSettingOptionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SetSetting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/SetSetting',
            camera_dot_camera__pb2.SetSettingRequest.SerializeToString,
            camera_dot_camera__pb2.SetSettingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetSetting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/GetSetting',
            camera_dot_camera__pb2.GetSettingRequest.SerializeToString,
            camera_dot_camera__pb2.GetSettingResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FormatStorage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/FormatStorage',
            camera_dot_camera__pb2.FormatStorageRequest.SerializeToString,
            camera_dot_camera__pb2.FormatStorageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ResetSettings(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/ResetSettings',
            camera_dot_camera__pb2.ResetSettingsRequest.SerializeToString,
            camera_dot_camera__pb2.ResetSettingsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ZoomInStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/ZoomInStart',
            camera_dot_camera__pb2.ZoomInStartRequest.SerializeToString,
            camera_dot_camera__pb2.ZoomInStartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ZoomOutStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/ZoomOutStart',
            camera_dot_camera__pb2.ZoomOutStartRequest.SerializeToString,
            camera_dot_camera__pb2.ZoomOutStartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ZoomStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/ZoomStop',
            camera_dot_camera__pb2.ZoomStopRequest.SerializeToString,
            camera_dot_camera__pb2.ZoomStopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ZoomRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/ZoomRange',
            camera_dot_camera__pb2.ZoomRangeRequest.SerializeToString,
            camera_dot_camera__pb2.ZoomRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrackPoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/TrackPoint',
            camera_dot_camera__pb2.TrackPointRequest.SerializeToString,
            camera_dot_camera__pb2.TrackPointResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrackRectangle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/TrackRectangle',
            camera_dot_camera__pb2.TrackRectangleRequest.SerializeToString,
            camera_dot_camera__pb2.TrackRectangleResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TrackStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/TrackStop',
            camera_dot_camera__pb2.TrackStopRequest.SerializeToString,
            camera_dot_camera__pb2.TrackStopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FocusInStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/FocusInStart',
            camera_dot_camera__pb2.FocusInStartRequest.SerializeToString,
            camera_dot_camera__pb2.FocusInStartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FocusOutStart(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/FocusOutStart',
            camera_dot_camera__pb2.FocusOutStartRequest.SerializeToString,
            camera_dot_camera__pb2.FocusOutStartResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FocusStop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/FocusStop',
            camera_dot_camera__pb2.FocusStopRequest.SerializeToString,
            camera_dot_camera__pb2.FocusStopResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FocusRange(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.camera.CameraService/FocusRange',
            camera_dot_camera__pb2.FocusRangeRequest.SerializeToString,
            camera_dot_camera__pb2.FocusRangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
