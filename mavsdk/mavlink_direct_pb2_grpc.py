# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import warnings

from . import mavlink_direct_pb2 as mavlink__direct_dot_mavlink__direct__pb2

GRPC_GENERATED_VERSION = "1.74.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in mavlink_direct/mavlink_direct_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class MavlinkDirectServiceStub(object):
    """Enable direct MAVLink communication using libmav."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMessage = channel.unary_unary(
            "/mavsdk.rpc.mavlink_direct.MavlinkDirectService/SendMessage",
            request_serializer=mavlink__direct_dot_mavlink__direct__pb2.SendMessageRequest.SerializeToString,
            response_deserializer=mavlink__direct_dot_mavlink__direct__pb2.SendMessageResponse.FromString,
            _registered_method=True,
        )
        self.SubscribeMessage = channel.unary_stream(
            "/mavsdk.rpc.mavlink_direct.MavlinkDirectService/SubscribeMessage",
            request_serializer=mavlink__direct_dot_mavlink__direct__pb2.SubscribeMessageRequest.SerializeToString,
            response_deserializer=mavlink__direct_dot_mavlink__direct__pb2.MessageResponse.FromString,
            _registered_method=True,
        )
        self.LoadCustomXml = channel.unary_unary(
            "/mavsdk.rpc.mavlink_direct.MavlinkDirectService/LoadCustomXml",
            request_serializer=mavlink__direct_dot_mavlink__direct__pb2.LoadCustomXmlRequest.SerializeToString,
            response_deserializer=mavlink__direct_dot_mavlink__direct__pb2.LoadCustomXmlResponse.FromString,
            _registered_method=True,
        )


class MavlinkDirectServiceServicer(object):
    """Enable direct MAVLink communication using libmav."""

    def SendMessage(self, request, context):
        """
        Send a MAVLink message directly to the system.

        This allows sending any MAVLink message with full control over the message content.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SubscribeMessage(self, request, context):
        """
        Subscribe to incoming MAVLink messages.

        This provides direct access to incoming MAVLink messages. Use an empty string
        in message_name to subscribe to all messages, or specify a message name
        (e.g., "HEARTBEAT") to filter for specific message types.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def LoadCustomXml(self, request, context):
        """
        Load custom MAVLink message definitions from XML.

        This allows loading custom MAVLink message definitions at runtime,
        extending the available message types beyond the built-in definitions.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MavlinkDirectServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SendMessage": grpc.unary_unary_rpc_method_handler(
            servicer.SendMessage,
            request_deserializer=mavlink__direct_dot_mavlink__direct__pb2.SendMessageRequest.FromString,
            response_serializer=mavlink__direct_dot_mavlink__direct__pb2.SendMessageResponse.SerializeToString,
        ),
        "SubscribeMessage": grpc.unary_stream_rpc_method_handler(
            servicer.SubscribeMessage,
            request_deserializer=mavlink__direct_dot_mavlink__direct__pb2.SubscribeMessageRequest.FromString,
            response_serializer=mavlink__direct_dot_mavlink__direct__pb2.MessageResponse.SerializeToString,
        ),
        "LoadCustomXml": grpc.unary_unary_rpc_method_handler(
            servicer.LoadCustomXml,
            request_deserializer=mavlink__direct_dot_mavlink__direct__pb2.LoadCustomXmlRequest.FromString,
            response_serializer=mavlink__direct_dot_mavlink__direct__pb2.LoadCustomXmlResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "mavsdk.rpc.mavlink_direct.MavlinkDirectService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers(
        "mavsdk.rpc.mavlink_direct.MavlinkDirectService", rpc_method_handlers
    )


# This class is part of an EXPERIMENTAL API.
class MavlinkDirectService(object):
    """Enable direct MAVLink communication using libmav."""

    @staticmethod
    def SendMessage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mavsdk.rpc.mavlink_direct.MavlinkDirectService/SendMessage",
            mavlink__direct_dot_mavlink__direct__pb2.SendMessageRequest.SerializeToString,
            mavlink__direct_dot_mavlink__direct__pb2.SendMessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def SubscribeMessage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/mavsdk.rpc.mavlink_direct.MavlinkDirectService/SubscribeMessage",
            mavlink__direct_dot_mavlink__direct__pb2.SubscribeMessageRequest.SerializeToString,
            mavlink__direct_dot_mavlink__direct__pb2.MessageResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def LoadCustomXml(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/mavsdk.rpc.mavlink_direct.MavlinkDirectService/LoadCustomXml",
            mavlink__direct_dot_mavlink__direct__pb2.LoadCustomXmlRequest.SerializeToString,
            mavlink__direct_dot_mavlink__direct__pb2.LoadCustomXmlResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
