# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import telemetry_server_pb2 as telemetry__server_dot_telemetry__server__pb2

GRPC_GENERATED_VERSION = '1.70.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in telemetry_server/telemetry_server_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class TelemetryServerServiceStub(object):
    """
    Allow users to provide vehicle telemetry and state information
    (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PublishPosition = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishPosition',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishPositionRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishPositionResponse.FromString,
                _registered_method=True)
        self.PublishHome = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishHome',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishHomeRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishHomeResponse.FromString,
                _registered_method=True)
        self.PublishSysStatus = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishSysStatus',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishSysStatusRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishSysStatusResponse.FromString,
                _registered_method=True)
        self.PublishExtendedSysState = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishExtendedSysState',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishExtendedSysStateRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishExtendedSysStateResponse.FromString,
                _registered_method=True)
        self.PublishRawGps = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishRawGps',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishRawGpsRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishRawGpsResponse.FromString,
                _registered_method=True)
        self.PublishBattery = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishBattery',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishBatteryRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishBatteryResponse.FromString,
                _registered_method=True)
        self.PublishStatusText = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishStatusText',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishStatusTextRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishStatusTextResponse.FromString,
                _registered_method=True)
        self.PublishOdometry = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishOdometry',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishOdometryRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishOdometryResponse.FromString,
                _registered_method=True)
        self.PublishPositionVelocityNed = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishPositionVelocityNed',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishPositionVelocityNedRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishPositionVelocityNedResponse.FromString,
                _registered_method=True)
        self.PublishGroundTruth = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishGroundTruth',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishGroundTruthRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishGroundTruthResponse.FromString,
                _registered_method=True)
        self.PublishImu = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishImu',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishImuRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishImuResponse.FromString,
                _registered_method=True)
        self.PublishScaledImu = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishScaledImu',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishScaledImuRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishScaledImuResponse.FromString,
                _registered_method=True)
        self.PublishRawImu = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishRawImu',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishRawImuRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishRawImuResponse.FromString,
                _registered_method=True)
        self.PublishUnixEpochTime = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishUnixEpochTime',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishUnixEpochTimeRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishUnixEpochTimeResponse.FromString,
                _registered_method=True)
        self.PublishDistanceSensor = channel.unary_unary(
                '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishDistanceSensor',
                request_serializer=telemetry__server_dot_telemetry__server__pb2.PublishDistanceSensorRequest.SerializeToString,
                response_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishDistanceSensorResponse.FromString,
                _registered_method=True)


class TelemetryServerServiceServicer(object):
    """
    Allow users to provide vehicle telemetry and state information
    (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
    """

    def PublishPosition(self, request, context):
        """Publish to 'position' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishHome(self, request, context):
        """Publish to 'home position' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishSysStatus(self, request, context):
        """Publish 'sys status' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishExtendedSysState(self, request, context):
        """Publish 'extended sys state' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishRawGps(self, request, context):
        """Publish to 'Raw GPS' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishBattery(self, request, context):
        """Publish to 'battery' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishStatusText(self, request, context):
        """Publish to 'status text' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishOdometry(self, request, context):
        """Publish to 'odometry' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishPositionVelocityNed(self, request, context):
        """Publish to 'position velocity' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishGroundTruth(self, request, context):
        """Publish to 'ground truth' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishImu(self, request, context):
        """Publish to 'IMU' updates (in SI units in NED body frame).
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishScaledImu(self, request, context):
        """Publish to 'Scaled IMU' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishRawImu(self, request, context):
        """Publish to 'Raw IMU' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishUnixEpochTime(self, request, context):
        """Publish to 'unix epoch time' updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishDistanceSensor(self, request, context):
        """Publish to "distance sensor" updates.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TelemetryServerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PublishPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishPosition,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishPositionRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishPositionResponse.SerializeToString,
            ),
            'PublishHome': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishHome,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishHomeRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishHomeResponse.SerializeToString,
            ),
            'PublishSysStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishSysStatus,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishSysStatusRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishSysStatusResponse.SerializeToString,
            ),
            'PublishExtendedSysState': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishExtendedSysState,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishExtendedSysStateRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishExtendedSysStateResponse.SerializeToString,
            ),
            'PublishRawGps': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishRawGps,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishRawGpsRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishRawGpsResponse.SerializeToString,
            ),
            'PublishBattery': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishBattery,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishBatteryRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishBatteryResponse.SerializeToString,
            ),
            'PublishStatusText': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishStatusText,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishStatusTextRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishStatusTextResponse.SerializeToString,
            ),
            'PublishOdometry': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishOdometry,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishOdometryRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishOdometryResponse.SerializeToString,
            ),
            'PublishPositionVelocityNed': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishPositionVelocityNed,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishPositionVelocityNedRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishPositionVelocityNedResponse.SerializeToString,
            ),
            'PublishGroundTruth': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishGroundTruth,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishGroundTruthRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishGroundTruthResponse.SerializeToString,
            ),
            'PublishImu': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishImu,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishImuRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishImuResponse.SerializeToString,
            ),
            'PublishScaledImu': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishScaledImu,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishScaledImuRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishScaledImuResponse.SerializeToString,
            ),
            'PublishRawImu': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishRawImu,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishRawImuRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishRawImuResponse.SerializeToString,
            ),
            'PublishUnixEpochTime': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishUnixEpochTime,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishUnixEpochTimeRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishUnixEpochTimeResponse.SerializeToString,
            ),
            'PublishDistanceSensor': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishDistanceSensor,
                    request_deserializer=telemetry__server_dot_telemetry__server__pb2.PublishDistanceSensorRequest.FromString,
                    response_serializer=telemetry__server_dot_telemetry__server__pb2.PublishDistanceSensorResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mavsdk.rpc.telemetry_server.TelemetryServerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('mavsdk.rpc.telemetry_server.TelemetryServerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TelemetryServerService(object):
    """
    Allow users to provide vehicle telemetry and state information
    (e.g. battery, GPS, RC connection, flight mode etc.) and set telemetry update rates.
    """

    @staticmethod
    def PublishPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishPosition',
            telemetry__server_dot_telemetry__server__pb2.PublishPositionRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishPositionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishHome(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishHome',
            telemetry__server_dot_telemetry__server__pb2.PublishHomeRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishHomeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishSysStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishSysStatus',
            telemetry__server_dot_telemetry__server__pb2.PublishSysStatusRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishSysStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishExtendedSysState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishExtendedSysState',
            telemetry__server_dot_telemetry__server__pb2.PublishExtendedSysStateRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishExtendedSysStateResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishRawGps(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishRawGps',
            telemetry__server_dot_telemetry__server__pb2.PublishRawGpsRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishRawGpsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishBattery(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishBattery',
            telemetry__server_dot_telemetry__server__pb2.PublishBatteryRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishBatteryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishStatusText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishStatusText',
            telemetry__server_dot_telemetry__server__pb2.PublishStatusTextRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishStatusTextResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishOdometry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishOdometry',
            telemetry__server_dot_telemetry__server__pb2.PublishOdometryRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishOdometryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishPositionVelocityNed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishPositionVelocityNed',
            telemetry__server_dot_telemetry__server__pb2.PublishPositionVelocityNedRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishPositionVelocityNedResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishGroundTruth(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishGroundTruth',
            telemetry__server_dot_telemetry__server__pb2.PublishGroundTruthRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishGroundTruthResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishImu',
            telemetry__server_dot_telemetry__server__pb2.PublishImuRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishImuResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishScaledImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishScaledImu',
            telemetry__server_dot_telemetry__server__pb2.PublishScaledImuRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishScaledImuResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishRawImu(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishRawImu',
            telemetry__server_dot_telemetry__server__pb2.PublishRawImuRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishRawImuResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishUnixEpochTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishUnixEpochTime',
            telemetry__server_dot_telemetry__server__pb2.PublishUnixEpochTimeRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishUnixEpochTimeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PublishDistanceSensor(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/mavsdk.rpc.telemetry_server.TelemetryServerService/PublishDistanceSensor',
            telemetry__server_dot_telemetry__server__pb2.PublishDistanceSensorRequest.SerializeToString,
            telemetry__server_dot_telemetry__server__pb2.PublishDistanceSensorResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
